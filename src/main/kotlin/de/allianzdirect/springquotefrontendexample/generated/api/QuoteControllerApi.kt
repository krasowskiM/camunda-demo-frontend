/**
 * Quote service API
 *
 * Api providing functions for customer quote
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package de.allianzdirect.springquotefrontendexample.generated.api

import java.io.IOException
import okhttp3.OkHttpClient

import de.allianzdirect.springquotefrontendexample.generated.model.QuoteRequest
import de.allianzdirect.springquotefrontendexample.generated.model.QuoteResponse

import com.squareup.moshi.Json

import de.allianzdirect.springquotefrontendexample.generated.infrastructure.ApiClient
import de.allianzdirect.springquotefrontendexample.generated.infrastructure.ApiResponse
import de.allianzdirect.springquotefrontendexample.generated.infrastructure.ClientException
import de.allianzdirect.springquotefrontendexample.generated.infrastructure.ClientError
import de.allianzdirect.springquotefrontendexample.generated.infrastructure.ServerException
import de.allianzdirect.springquotefrontendexample.generated.infrastructure.ServerError
import de.allianzdirect.springquotefrontendexample.generated.infrastructure.MultiValueMap
import de.allianzdirect.springquotefrontendexample.generated.infrastructure.PartConfig
import de.allianzdirect.springquotefrontendexample.generated.infrastructure.RequestConfig
import de.allianzdirect.springquotefrontendexample.generated.infrastructure.RequestMethod
import de.allianzdirect.springquotefrontendexample.generated.infrastructure.ResponseType
import de.allianzdirect.springquotefrontendexample.generated.infrastructure.Success
import de.allianzdirect.springquotefrontendexample.generated.infrastructure.toMultiValue

class QuoteControllerApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:8085")
        }
    }

    /**
     * 
     * 
     * @param quoteRequest 
     * @return QuoteResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun processQuote(quoteRequest: QuoteRequest) : QuoteResponse {
        val localVarResponse = processQuoteWithHttpInfo(quoteRequest = quoteRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QuoteResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param quoteRequest 
     * @return ApiResponse<QuoteResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun processQuoteWithHttpInfo(quoteRequest: QuoteRequest) : ApiResponse<QuoteResponse?> {
        val localVariableConfig = processQuoteRequestConfig(quoteRequest = quoteRequest)

        return request<QuoteRequest, QuoteResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation processQuote
     *
     * @param quoteRequest 
     * @return RequestConfig
     */
    fun processQuoteRequestConfig(quoteRequest: QuoteRequest) : RequestConfig<QuoteRequest> {
        val localVariableBody = quoteRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/quoteApi/v1",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
